generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("user")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  loginLogs     LoginLog[]
  sessions      Session[]
  transactions  Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ProductList {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  unit      String    @default("kg")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([name, price])
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  unitPrice       Float
  quantity        Float
  price           Float
  unit            String
  kgRatio         Float            @default(1)
  importDate      DateTime
  productListId   Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inventory       Inventory?
  inventoryChecks InventoryCheck[]
  productList     ProductList      @relation(fields: [productListId], references: [id])
  stockLogs       StockLog[]
  transactions    Transaction[]
}

model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Float    @default(0)
  productId Int      @unique
  minStock  Int      @default(0)
  maxStock  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model StockLog {
  id          Int      @id @default(autoincrement())
  productId   Int
  type        String
  quantity    Float
  beforeStock Float
  afterStock  Float
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
}

model InventoryCheck {
  id        Int      @id @default(autoincrement())
  productId Int
  date      DateTime
  type      String
  quantity  Float
  amount    Float
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      String
  type        String
  quantity    Float
  price       Float
  totalAmount Float
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}
