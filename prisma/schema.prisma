// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 用户模型
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("user")
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  loginLogs     LoginLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 登录日志
model LoginLog {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  ip        String?
  userAgent String?
  createdAt DateTime  @default(now())
}

// 商品列表模型（用于存储不同价格的商品）
model ProductList {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  unit      String    @default("kg")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  
  @@unique([name, price])
}

// 产品记录模型（用于存储每次录入的商品）
model Product {
  id            Int         @id @default(autoincrement())
  name          String
  unitPrice     Float
  quantity      Float
  price         Float
  unit          String
  kgRatio       Float      @default(1)
  importDate    DateTime
  productList   ProductList @relation(fields: [productListId], references: [id])
  productListId Int
  inventory     Inventory?
  stockLogs     StockLog[]
  transactions  Transaction[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// 库存模型
model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Float    @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  minStock  Int      @default(0) // 最小库存
  maxStock  Int?     // 最大库存
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 库存变动记录
model StockLog {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  type        String   // IN: 入库, OUT: 出库
  quantity    Float
  beforeStock Float    // 变动前库存
  afterStock  Float    // 变动后库存
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 交易记录
model Transaction {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // IN: 入库, OUT: 出库
  quantity    Float
  price       Float
  totalAmount Float
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
